name: Bounty CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build-and-test:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install
          
      - name: Run Backend Tests
        run: |
          cd backend
          npm test
          
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install --legacy-peer-deps

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Build Frontend
        run: |
          cd frontend
          npm install --legacy-peer-deps
          npm run build
          
      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build
          
      - name: Create Deployment Package
        run: |
          # Create a temporary directory for deployment
          mkdir -p deploy
          
          # Copy backend files
          cp -r backend/* deploy/
          rm -rf deploy/node_modules
          
          # Copy frontend build
          mkdir -p deploy/public
          cp -r frontend/.next deploy/public/
          cp -r frontend/public/* deploy/public/
          
          # Copy configuration files
          cp package.json deploy/
          cp server.js deploy/
          cp Procfile deploy/
          cp -r .ebextensions deploy/
          
          # Create zip file
          cd deploy
          zip -r ../app.zip . -x "*.git*" "node_modules/*" ".github/*"
          cd ..
          
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_EB_APP_NAME }}
          environment_name: ${{ secrets.AWS_EB_ENV_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: app.zip
          wait_for_deployment: true

  monitoring-setup:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Enable Enhanced Health Reporting
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.AWS_EB_ENV_NAME }} \
            --option-settings Namespace=aws:elasticbeanstalk:healthreporting:system,OptionName=SystemType,Value=enhanced
          
      - name: Configure CloudWatch Logs
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.AWS_EB_ENV_NAME }} \
            --option-settings Namespace=aws:elasticbeanstalk:cloudwatch:logs,OptionName=StreamLogs,Value=true \
            --option-settings Namespace=aws:elasticbeanstalk:cloudwatch:logs,OptionName=DeleteOnTerminate,Value=false \
            --option-settings Namespace=aws:elasticbeanstalk:cloudwatch:logs,OptionName=RetentionInDays,Value=7